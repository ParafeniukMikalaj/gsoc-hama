<?xml version="1.0"?>

<!--
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<project name="hama" default="jar">
    <property name="version" value="0.2.0-dev" />
    <property name="Name" value="Hama" />
    <property name="final.name" value="hama-${version}" />
    <property name="year" value="2009" />

    <!-- Load all the default properties, and any the user wants    -->
    <!-- to contribute (without having to type -D or edit this file -->
    <property file="${user.home}/${name}.build.properties" />
    <property file="${basedir}/build.properties" />

    <property name="src.dir" location="${basedir}/src/java" />
    <property name="src.test" location="${basedir}/src/test" />
    <property name="src.examples" location="${basedir}/src/examples" />

    <property name="lib.dir" value="${basedir}/lib" />
    <property name="conf.dir" value="${basedir}/conf" />
    <property name="docs.dir" value="${basedir}/docs" />
    <property name="docs.src" value="${basedir}/src/docs" />

	<!-- javacc properties -->
    <property name="javacc.home" value="${basedir}/lib" />

	<!-- build properties -->
	
    <property name="test.output" value="no" />
    <property name="test.timeout" value="600000" />

    <property name="build.dir" location="${basedir}/build" />
    <property name="build.lib" location="${build.dir}/lib" />
    <property name="build.classes" location="${build.dir}/classes" />
    <property name="build.test" location="${build.dir}/test" />
    <property name="build.examples" location="${build.dir}/examples" />
    <property name="build.docs" value="${build.dir}/docs/site" />
    <property name="build.javadoc" value="${build.docs}/api" />
    <property name="build.encoding" value="ISO-8859-1" />
    <property name="build.src" value="${build.dir}/src" />
    
    <property name="build.report" value="${build.dir}/reports" />
    <property name="build.report.findbugs" value="${build.report}/findbugs" />
    <property name="build.report.tests" value="${build.report}/tests" />
    
    <property name="test.build.dir" value="${build.dir}/test" />
    <property name="test.junit.output.format" value="plain" />

    <property name="dist.dir" value="${build.dir}/${final.name}" />

    <property name="javac.deprecation" value="off" />
    <property name="javac.debug" value="on" />

    <property name="javadoc.link.java" 
                 value="http://java.sun.com/javase/6/docs/api/" />
    <property name="javadoc.packages" value="org.apache.hama.*" />

    <fileset id="lib.jars" dir="${basedir}" includes="lib/*.jar" />
    <path id="classpath">
        <fileset refid="lib.jars" />
        <fileset dir="${lib.dir}/findbugs/">
            <include name="*jar" />
        </fileset>
        <pathelement location="${build.classes}" />
        <pathelement location="${conf.dir}" />
    </path>

    <taskdef name="findbugs" classpathref="classpath" 
    	classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />

    <target name="init">
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes}" />
        <mkdir dir="${build.test}" />
        <mkdir dir="${build.examples}" />
        <mkdir dir="${build.report.findbugs}" />
        <mkdir dir="${build.report.tests}" />
        <!--Copy bin, lib, and conf. too-->
        <mkdir dir="${build.lib}" />
        <copy todir="${build.lib}">
            <fileset dir="${lib.dir}" />
        </copy>
    </target>
	
	<!-- ================================================================== -->
    <!-- Java Compiler Compiler, generate Parsers                           -->
    <!-- ================================================================== -->

    <target name="compile" depends="init">
        <!--Compile whats under src and generated java classes made from jsp-->
        <mkdir dir="${build.src}" />
        <javac encoding="${build.encoding}" 
                srcdir="${src.dir};${build.src};${src.examples}" includes="**/*.java" 
        	destdir="${build.classes}" debug="${javac.debug}" 
                deprecation="${javac.deprecation}">
            <classpath refid="classpath" />
        </javac>
    </target>

    <target name="compile-examples" depends="compile">
        <javac encoding="${build.encoding}" srcdir="${src.examples}" 
                includes="**/*.java" 
        	destdir="${build.examples}" debug="${javac.debug}" 
                deprecation="${javac.deprecation}">
            <classpath refid="classpath" />
        </javac>
    </target>

    <!-- Override jar target to specify main class -->
    <target name="jar" depends="compile">
        <jar jarfile="${build.dir}/${final.name}.jar" 
              basedir="${build.classes}">
        </jar>
    </target>

    <target name="examples" depends="jar, compile-examples" 
    	description="Make the hama examples jar.">
        <jar jarfile="${build.dir}/${final.name}-examples.jar" 
                basedir="${build.examples}">
            <manifest>
                <attribute name="Main-Class" 
                    value="org/apache/hama/examples/ExampleDriver" />
            </manifest>
        </jar>
    </target>

    <target name="package" depends="jar,javadoc,examples,compile-test" 
    	description="Build distribution">
        <mkdir dir="${dist.dir}" />
        <copy todir="${dist.dir}" includeEmptyDirs="false" flatten="true">
            <fileset dir="${build.dir}">
                <include name="${final.name}.jar" />
                <include name="${final.name}-test.jar" />
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/lib" />
        <copy todir="${dist.dir}/lib">
            <fileset dir="${build.lib}" />
        </copy>
        <copy todir="${dist.dir}">
            <fileset dir=".">
                <include name="*.txt" />
            </fileset>
        </copy>
        <mkdir dir="${dist.dir}/src" />
        <copy todir="${dist.dir}/src" includeEmptyDirs="true">
            <fileset dir="src" excludes="**/*.template **/docs/build/**/*" />
        </copy>
    </target>

    <!-- ================================================================== -->
    <!-- Make release tarball                                               -->
    <!-- ================================================================== -->
    <macrodef name="macro_tar" description="Worker Macro for tar">
        <attribute name="param.destfile" />
        <element name="param.listofitems" />
        <sequential>
            <tar compression="gzip" longfile="gnu" destfile="@{param.destfile}">
                <param.listofitems />
            </tar>
        </sequential>
    </macrodef>
    <target name="tar" depends="package" description="Make release tarball">
        <macro_tar param.destfile="${build.dir}/${final.name}.tar.gz">
            <param.listofitems>
                <tarfileset dir="${build.dir}" mode="664">
                    <exclude name="${final.name}/bin/*" />
                    <include name="${final.name}/**" />
                </tarfileset>
                <tarfileset dir="${build.dir}" mode="755">
                    <include name="${final.name}/bin/*" />
                </tarfileset>
            </param.listofitems>
        </macro_tar>
    </target>

    <target name="binary" depends="package" 
    	description="Make tarball without source and documentation">
        <macro_tar param.destfile="${build.dir}/${final.name}-bin.tar.gz">
            <param.listofitems>
                <tarfileset dir="${build.dir}" mode="664">
                    <exclude name="${final.name}/bin/*" />
                    <exclude name="${final.name}/src/**" />
                    <exclude name="${final.name}/docs/**" />
                    <include name="${final.name}/**" />
                </tarfileset>
                <tarfileset dir="${build.dir}" mode="755">
                    <include name="${final.name}/bin/*" />
                </tarfileset>
            </param.listofitems>
        </macro_tar>
    </target>

    <!-- ================================================================== -->
    <!-- Doc                                                                -->
    <!-- ================================================================== -->
    <target name="docs" depends="forrest.check" description="Generate forrest-based documentation. To use, specify -Dforrest.home=&lt;base of Apache Forrest installation&gt; on the command line." if="forrest.home">
        <exec dir="${docs.src}" executable="${forrest.home}/bin/forrest" 
               failonerror="true">
        	<env key="JAVA_HOME" value="${java5.home}"/>
        </exec>
        <copy todir="${build.docs}">
          <fileset dir="${docs.src}/build/site/" />
        </copy>
    	<delete dir="${docs.src}/build/"/>
    </target>

    <target name="forrest.check" unless="forrest.home">
        <fail message="'forrest.home' is not defined. Please pass -Dforrest.home=&lt;base of Apache Forrest installation&gt; to Ant on the command-line." />
    </target>

    <!-- Javadoc -->
    <target name="javadoc" description="Generate javadoc">
        <mkdir dir="${build.javadoc}" />
        <javadoc overview="${src.dir}/overview.html" packagenames="org.apache.hama.*" 
        	    destdir="${build.javadoc}" author="true" version="true" use="true" 
        	    windowtitle="${Name} ${version} API" doctitle="${Name} ${version} API" 
        	    bottom="Copyright &amp;copy; ${year} The Apache Software Foundation">
            <packageset dir="${src.dir}">
                <include name="org/apache/**" />
            </packageset>
            <link href="${javadoc.link.java}" />
            <classpath>
                <path refid="classpath" />
                <pathelement path="${java.class.path}" />
            </classpath>
            <group title="${Name}" packages="org.apache.hama.*" />
        </javadoc>
    </target>

    <!-- ================================================================== -->
    <!-- Run unit tests                                                     -->
    <!-- ================================================================== -->
    <path id="test.classpath">
        <pathelement location="${src.test}" />
        <pathelement location="${build.test}" />
        <path refid="classpath" />
        <pathelement location="${build.dir}" />
    </path>

    <target name="compile-test" depends="compile">
        <javac encoding="${build.encoding}" srcdir="${src.test}" 
           includes="**/*.java" destdir="${build.test}" debug="${javac.debug}">
            <classpath refid="test.classpath" />
        </javac>
        <jar jarfile="${build.dir}/${final.name}-test.jar">
            <fileset dir="${build.test}" includes="org/**" />
            <fileset dir="${build.classes}" />
            <fileset dir="${src.test}" includes="**/*.properties" />
            <manifest>
              <attribute name="Main-Class" value="org/apache/hama/Utils" />
            </manifest>
        </jar>
    </target>

    <target name="test" depends="compile, compile-test">
        <junit printsummary="yes" showoutput="${test.output}" haltonfailure="no"
              fork="yes" maxmemory="512m" errorProperty="tests.failed" 
        	     failureProperty="tests.failed" timeout="${test.timeout}">
            <classpath refid="test.classpath" />
            <formatter type="${test.junit.output.format}" />
            <batchtest todir="${build.report.tests}">
                <fileset dir="${src.test}" includes="**/Test*.java" 
                	 excludes="**/${test.exclude}.java" />
            </batchtest>
        </junit>
        <fail if="tests.failed">Tests failed!</fail>
    </target>

    <target name="findbugs" depends="init, jar">
        <findbugs home="${lib.dir}/findbugs" output="xml" 
        	     outputFile="${build.report.findbugs}/hama-findbugs.xml" 
               excludeFilter="${conf.dir}/findbugs-exclude-filter.xml"
        	     auxClasspathRef="classpath">
            <sourcePath path="${src.dir}" />
            <class location="${build.dir}/${final.name}.jar" />
        </findbugs>
    </target>
    
    <target name="report" depends="findbugs,test"></target>
    
    <!-- ================================================================== -->
    <!-- Clean.  Delete the build files, and their directories              -->
    <!-- ================================================================== -->
    <target name="clean">
        <delete dir="${build.dir}" />
    </target>
</project>
